// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/errorCode.proto

package errorCode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ErrorClient is the client API for Error service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrorClient interface {
	ErrorServer(ctx context.Context, in *ErrorReq, opts ...grpc.CallOption) (*ErrorResp, error)
}

type errorClient struct {
	cc grpc.ClientConnInterface
}

func NewErrorClient(cc grpc.ClientConnInterface) ErrorClient {
	return &errorClient{cc}
}

func (c *errorClient) ErrorServer(ctx context.Context, in *ErrorReq, opts ...grpc.CallOption) (*ErrorResp, error) {
	out := new(ErrorResp)
	err := c.cc.Invoke(ctx, "/errorCode.Error/ErrorServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrorServer is the server API for Error service.
// All implementations must embed UnimplementedErrorServer
// for forward compatibility
type ErrorServer interface {
	ErrorServer(context.Context, *ErrorReq) (*ErrorResp, error)
	mustEmbedUnimplementedErrorServer()
}

// UnimplementedErrorServer must be embedded to have forward compatible implementations.
type UnimplementedErrorServer struct {
}

func (UnimplementedErrorServer) ErrorServer(context.Context, *ErrorReq) (*ErrorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ErrorServer not implemented")
}
func (UnimplementedErrorServer) mustEmbedUnimplementedErrorServer() {}

// UnsafeErrorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrorServer will
// result in compilation errors.
type UnsafeErrorServer interface {
	mustEmbedUnimplementedErrorServer()
}

func RegisterErrorServer(s grpc.ServiceRegistrar, srv ErrorServer) {
	s.RegisterService(&Error_ServiceDesc, srv)
}

func _Error_ErrorServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorServer).ErrorServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errorCode.Error/ErrorServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorServer).ErrorServer(ctx, req.(*ErrorReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Error_ServiceDesc is the grpc.ServiceDesc for Error service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Error_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "errorCode.Error",
	HandlerType: (*ErrorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ErrorServer",
			Handler:    _Error_ErrorServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/errorCode.proto",
}
